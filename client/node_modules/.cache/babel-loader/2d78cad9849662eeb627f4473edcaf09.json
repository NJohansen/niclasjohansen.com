{"ast":null,"code":"import _toArray from \"/Users/niclasjohansen/Code/projects/newwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray\";\nimport _regeneratorRuntime from \"/Users/niclasjohansen/Code/projects/newwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/niclasjohansen/Code/projects/newwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/niclasjohansen/Code/projects/newwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/niclasjohansen/Code/projects/newwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/niclasjohansen/Code/projects/newwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/niclasjohansen/Code/projects/newwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/niclasjohansen/Code/projects/newwebsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/niclasjohansen/Code/projects/newwebsite/src/components/Post/Document.js\";\nimport React, { Component } from 'react';\nimport './Document.css';\nimport camelcase from 'camelcase';\nimport Markdown from '../Markdown';\n\nvar Post =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Post, _Component);\n\n  function Post() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Post);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Post)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      header: {},\n      text: ''\n    };\n    return _this;\n  }\n\n  _createClass(Post, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchPosts();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.props = nextProps;\n      this.fetchPosts();\n    }\n  }, {\n    key: \"fetchPosts\",\n    value: function () {\n      var _fetchPosts = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var res, post;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.setState({\n                  header: {},\n                  text: ''\n                });\n                _context.next = 3;\n                return fetch(\"/static/posts/\".concat(this.props.path.toLowerCase(), \".md\"));\n\n              case 3:\n                res = _context.sent;\n                _context.next = 6;\n                return res.text;\n\n              case 6:\n                post = _context.sent;\n                this.parsePost(post);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetchPosts() {\n        return _fetchPosts.apply(this, arguments);\n      }\n\n      return fetchPosts;\n    }()\n  }, {\n    key: \"parsePost\",\n    value: function parsePost(post) {\n      var _doc$split = doc.split('---'),\n          _doc$split2 = _toArray(_doc$split),\n          _ = _doc$split2[0],\n          rawHeader = _doc$split2[1],\n          body = _doc$split2.slice(2); //eslint-disable-line\n\n\n      var header = {};\n\n      for (var item in rawHeader.split('---')) {\n        var _item$split = item.split(':'),\n            _item$split2 = _toArray(_item$split),\n            key = _item$split2[0],\n            value = _item$split2.slice(1);\n\n        header[camelcase(key).trim()] = value.join(':').trim();\n      }\n\n      this.setState({\n        header: header,\n        text: body.join('').trim()\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render(_ref, _ref2) {\n      var path = _ref.path;\n      var header = _ref2.header,\n          text = _ref2.text;\n      return React.createElement(\"div\", {\n        class: \"post \".concat(text === '' ? 'loading' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, this.renderHeader(window.__postHeader || header), this.renderContent(text));\n    }\n  }, {\n    key: \"renderHeader\",\n    value: function renderHeader(_ref3) {\n      var title = _ref3.title,\n          description = _ref3.description,\n          coverColor = _ref3.coverColor;\n      var style = {\n        background: coverColor\n      };\n\n      if (!title) {\n        return null;\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, title), React.createElement(\"h2\", {\n        class: \"subject\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, description))));\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent(text) {\n      if (text === '') {\n        return React.createElement(\"div\", {\n          class: \"loading\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          class: \"fas fa-circle-notch fa-spin\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(\"section\", {\n        class: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(Markdown, {\n        text: text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Post;\n}(Component);\n\nexport { Post as default };","map":{"version":3,"sources":["/Users/niclasjohansen/Code/projects/newwebsite/src/components/Post/Document.js"],"names":["React","Component","camelcase","Markdown","Post","state","header","text","fetchPosts","nextProps","props","setState","fetch","path","toLowerCase","res","post","parsePost","doc","split","_","rawHeader","body","item","key","value","trim","join","renderHeader","window","__postHeader","renderContent","title","description","coverColor","style","background"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Document.css';\nimport camelcase from 'camelcase';\nimport Markdown from '../Markdown';\n\nexport default class Post extends Component{\n    state = {\n        header: {},\n        text: ''\n    }\n\n    componentDidMount(){\n        this.fetchPosts()\n    }\n\n    componentWillReceiveProps(nextProps){\n        this.props = nextProps\n        this.fetchPosts()\n    }\n\n    async fetchPosts(){\n        this.setState({header: {}, text: ''})\n        const res = await fetch(`/static/posts/${this.props.path.toLowerCase()}.md`)\n        const post = await res.text;\n        this.parsePost(post)\n    }\n\n    parsePost(post){\n        const [_, rawHeader, ...body] = doc.split('---') //eslint-disable-line\n        const header = {};\n\n        for (const item in rawHeader.split('---')) {\n            const [key, ...value] = item.split(':')\n            header[camelcase(key).trim()] = value.join(':').trim()\n        }\n\n        this.setState({\n            header,\n            text: body.join('').trim()\n        })\n    }\n\n    render ({ path }, { header, text }) {\n        return (\n          <div class={`post ${text === '' ? 'loading' : ''}`}>\n            {this.renderHeader(window.__postHeader || header)}\n            {this.renderContent(text)}\n          </div>\n        )\n      }\n\n      renderHeader({title, description, coverColor}){\n        const style = {\n            background: coverColor,\n        }\n\n        if(!title){\n            return null\n        }\n\n        return(\n            <div>\n                <header style={style}>\n                    <section>\n                        <h1>{title}</h1>\n                        <h2 class='subject'>{description}</h2>\n                    </section>\n                </header>\n          </div>\n        )\n      }\n\n      renderContent (text) {\n        if (text === '') {\n          return <div class='loading'><i class='fas fa-circle-notch fa-spin' /></div>\n        }\n    \n        return (\n          <section class='text'>\n            <Markdown text={text} />\n          </section>\n        )\n      }\n}"]},"metadata":{},"sourceType":"module"}